// <auto-generated />
using System;
using HIDAeroService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HIDAeroService.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250811092820_first-init")]
    partial class firstinit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HIDAeroService.Entity.ar_access_lv", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<short>("access_lv_number")
                        .HasColumnType("smallint");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("tz1")
                        .HasColumnType("smallint");

                    b.Property<short>("tz10")
                        .HasColumnType("smallint");

                    b.Property<short>("tz11")
                        .HasColumnType("smallint");

                    b.Property<short>("tz12")
                        .HasColumnType("smallint");

                    b.Property<short>("tz13")
                        .HasColumnType("smallint");

                    b.Property<short>("tz14")
                        .HasColumnType("smallint");

                    b.Property<short>("tz15")
                        .HasColumnType("smallint");

                    b.Property<short>("tz16")
                        .HasColumnType("smallint");

                    b.Property<short>("tz17")
                        .HasColumnType("smallint");

                    b.Property<short>("tz18")
                        .HasColumnType("smallint");

                    b.Property<short>("tz19")
                        .HasColumnType("smallint");

                    b.Property<short>("tz2")
                        .HasColumnType("smallint");

                    b.Property<short>("tz20")
                        .HasColumnType("smallint");

                    b.Property<short>("tz21")
                        .HasColumnType("smallint");

                    b.Property<short>("tz22")
                        .HasColumnType("smallint");

                    b.Property<short>("tz23")
                        .HasColumnType("smallint");

                    b.Property<short>("tz24")
                        .HasColumnType("smallint");

                    b.Property<short>("tz25")
                        .HasColumnType("smallint");

                    b.Property<short>("tz26")
                        .HasColumnType("smallint");

                    b.Property<short>("tz27")
                        .HasColumnType("smallint");

                    b.Property<short>("tz28")
                        .HasColumnType("smallint");

                    b.Property<short>("tz29")
                        .HasColumnType("smallint");

                    b.Property<short>("tz3")
                        .HasColumnType("smallint");

                    b.Property<short>("tz30")
                        .HasColumnType("smallint");

                    b.Property<short>("tz31")
                        .HasColumnType("smallint");

                    b.Property<short>("tz32")
                        .HasColumnType("smallint");

                    b.Property<short>("tz33")
                        .HasColumnType("smallint");

                    b.Property<short>("tz34")
                        .HasColumnType("smallint");

                    b.Property<short>("tz35")
                        .HasColumnType("smallint");

                    b.Property<short>("tz36")
                        .HasColumnType("smallint");

                    b.Property<short>("tz37")
                        .HasColumnType("smallint");

                    b.Property<short>("tz38")
                        .HasColumnType("smallint");

                    b.Property<short>("tz39")
                        .HasColumnType("smallint");

                    b.Property<short>("tz4")
                        .HasColumnType("smallint");

                    b.Property<short>("tz40")
                        .HasColumnType("smallint");

                    b.Property<short>("tz41")
                        .HasColumnType("smallint");

                    b.Property<short>("tz42")
                        .HasColumnType("smallint");

                    b.Property<short>("tz43")
                        .HasColumnType("smallint");

                    b.Property<short>("tz44")
                        .HasColumnType("smallint");

                    b.Property<short>("tz45")
                        .HasColumnType("smallint");

                    b.Property<short>("tz46")
                        .HasColumnType("smallint");

                    b.Property<short>("tz47")
                        .HasColumnType("smallint");

                    b.Property<short>("tz48")
                        .HasColumnType("smallint");

                    b.Property<short>("tz49")
                        .HasColumnType("smallint");

                    b.Property<short>("tz5")
                        .HasColumnType("smallint");

                    b.Property<short>("tz50")
                        .HasColumnType("smallint");

                    b.Property<short>("tz51")
                        .HasColumnType("smallint");

                    b.Property<short>("tz52")
                        .HasColumnType("smallint");

                    b.Property<short>("tz53")
                        .HasColumnType("smallint");

                    b.Property<short>("tz54")
                        .HasColumnType("smallint");

                    b.Property<short>("tz55")
                        .HasColumnType("smallint");

                    b.Property<short>("tz56")
                        .HasColumnType("smallint");

                    b.Property<short>("tz57")
                        .HasColumnType("smallint");

                    b.Property<short>("tz58")
                        .HasColumnType("smallint");

                    b.Property<short>("tz59")
                        .HasColumnType("smallint");

                    b.Property<short>("tz6")
                        .HasColumnType("smallint");

                    b.Property<short>("tz60")
                        .HasColumnType("smallint");

                    b.Property<short>("tz61")
                        .HasColumnType("smallint");

                    b.Property<short>("tz62")
                        .HasColumnType("smallint");

                    b.Property<short>("tz63")
                        .HasColumnType("smallint");

                    b.Property<short>("tz64")
                        .HasColumnType("smallint");

                    b.Property<short>("tz7")
                        .HasColumnType("smallint");

                    b.Property<short>("tz8")
                        .HasColumnType("smallint");

                    b.Property<short>("tz9")
                        .HasColumnType("smallint");

                    b.HasKey("id");

                    b.ToTable("ar_access_lvls");

                    b.HasData(
                        new
                        {
                            id = 1,
                            access_lv_number = (short)0,
                            name = "Full Access",
                            tz1 = (short)1,
                            tz10 = (short)1,
                            tz11 = (short)1,
                            tz12 = (short)1,
                            tz13 = (short)1,
                            tz14 = (short)1,
                            tz15 = (short)1,
                            tz16 = (short)1,
                            tz17 = (short)1,
                            tz18 = (short)1,
                            tz19 = (short)1,
                            tz2 = (short)1,
                            tz20 = (short)1,
                            tz21 = (short)1,
                            tz22 = (short)1,
                            tz23 = (short)1,
                            tz24 = (short)1,
                            tz25 = (short)1,
                            tz26 = (short)1,
                            tz27 = (short)1,
                            tz28 = (short)1,
                            tz29 = (short)1,
                            tz3 = (short)1,
                            tz30 = (short)1,
                            tz31 = (short)1,
                            tz32 = (short)1,
                            tz33 = (short)1,
                            tz34 = (short)1,
                            tz35 = (short)1,
                            tz36 = (short)1,
                            tz37 = (short)1,
                            tz38 = (short)1,
                            tz39 = (short)1,
                            tz4 = (short)1,
                            tz40 = (short)1,
                            tz41 = (short)1,
                            tz42 = (short)1,
                            tz43 = (short)1,
                            tz44 = (short)1,
                            tz45 = (short)1,
                            tz46 = (short)1,
                            tz47 = (short)1,
                            tz48 = (short)1,
                            tz49 = (short)1,
                            tz5 = (short)1,
                            tz50 = (short)1,
                            tz51 = (short)1,
                            tz52 = (short)1,
                            tz53 = (short)1,
                            tz54 = (short)1,
                            tz55 = (short)1,
                            tz56 = (short)1,
                            tz57 = (short)1,
                            tz58 = (short)1,
                            tz59 = (short)1,
                            tz6 = (short)1,
                            tz60 = (short)1,
                            tz61 = (short)1,
                            tz62 = (short)1,
                            tz63 = (short)1,
                            tz64 = (short)1,
                            tz7 = (short)1,
                            tz8 = (short)1,
                            tz9 = (short)1
                        },
                        new
                        {
                            id = 2,
                            access_lv_number = (short)1,
                            name = "No Access",
                            tz1 = (short)0,
                            tz10 = (short)0,
                            tz11 = (short)0,
                            tz12 = (short)0,
                            tz13 = (short)0,
                            tz14 = (short)0,
                            tz15 = (short)0,
                            tz16 = (short)0,
                            tz17 = (short)0,
                            tz18 = (short)0,
                            tz19 = (short)0,
                            tz2 = (short)0,
                            tz20 = (short)0,
                            tz21 = (short)0,
                            tz22 = (short)0,
                            tz23 = (short)0,
                            tz24 = (short)0,
                            tz25 = (short)0,
                            tz26 = (short)0,
                            tz27 = (short)0,
                            tz28 = (short)0,
                            tz29 = (short)0,
                            tz3 = (short)0,
                            tz30 = (short)0,
                            tz31 = (short)0,
                            tz32 = (short)0,
                            tz33 = (short)0,
                            tz34 = (short)0,
                            tz35 = (short)0,
                            tz36 = (short)0,
                            tz37 = (short)0,
                            tz38 = (short)0,
                            tz39 = (short)0,
                            tz4 = (short)0,
                            tz40 = (short)0,
                            tz41 = (short)0,
                            tz42 = (short)0,
                            tz43 = (short)0,
                            tz44 = (short)0,
                            tz45 = (short)0,
                            tz46 = (short)0,
                            tz47 = (short)0,
                            tz48 = (short)0,
                            tz49 = (short)0,
                            tz5 = (short)0,
                            tz50 = (short)0,
                            tz51 = (short)0,
                            tz52 = (short)0,
                            tz53 = (short)0,
                            tz54 = (short)0,
                            tz55 = (short)0,
                            tz56 = (short)0,
                            tz57 = (short)0,
                            tz58 = (short)0,
                            tz59 = (short)0,
                            tz6 = (short)0,
                            tz60 = (short)0,
                            tz61 = (short)0,
                            tz62 = (short)0,
                            tz63 = (short)0,
                            tz64 = (short)0,
                            tz7 = (short)0,
                            tz8 = (short)0,
                            tz9 = (short)0
                        });
                });

            modelBuilder.Entity("HIDAeroService.Entity.ar_acr", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<short>("access_cfg")
                        .HasColumnType("smallint");

                    b.Property<short>("acr_number")
                        .HasColumnType("smallint");

                    b.Property<short>("altrdr_number")
                        .HasColumnType("smallint");

                    b.Property<short>("altrdr_sio")
                        .HasColumnType("smallint");

                    b.Property<short>("altrdr_spec")
                        .HasColumnType("smallint");

                    b.Property<short>("apb_delay")
                        .HasColumnType("smallint");

                    b.Property<short>("apb_mode")
                        .HasColumnType("smallint");

                    b.Property<short>("cd_format")
                        .HasColumnType("smallint");

                    b.Property<short>("dc_held")
                        .HasColumnType("smallint");

                    b.Property<short>("dc_held2")
                        .HasColumnType("smallint");

                    b.Property<short>("default_led_mode")
                        .HasColumnType("smallint");

                    b.Property<short>("default_mode")
                        .HasColumnType("smallint");

                    b.Property<short>("dfofFilterTime")
                        .HasColumnType("smallint");

                    b.Property<short>("ilPB_long_press")
                        .HasColumnType("smallint");

                    b.Property<short>("ilPB_number")
                        .HasColumnType("smallint");

                    b.Property<short>("ilPB_out_num")
                        .HasColumnType("smallint");

                    b.Property<short>("ilPB_out_sio")
                        .HasColumnType("smallint");

                    b.Property<short>("ilPB_sio")
                        .HasColumnType("smallint");

                    b.Property<short>("nExtFeatureType")
                        .HasColumnType("smallint");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("offline_mode")
                        .HasColumnType("smallint");

                    b.Property<short>("pre_alarm")
                        .HasColumnType("smallint");

                    b.Property<short>("rdr_sio")
                        .HasColumnType("smallint");

                    b.Property<short>("reader_number")
                        .HasColumnType("smallint");

                    b.Property<short>("rex1_number")
                        .HasColumnType("smallint");

                    b.Property<short>("rex1_sio")
                        .HasColumnType("smallint");

                    b.Property<short>("rex1_tzmask")
                        .HasColumnType("smallint");

                    b.Property<short>("rex2_number")
                        .HasColumnType("smallint");

                    b.Property<short>("rex2_sio")
                        .HasColumnType("smallint");

                    b.Property<short>("rex2_tzmask")
                        .HasColumnType("smallint");

                    b.Property<string>("scp_ip")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("sensor_number")
                        .HasColumnType("smallint");

                    b.Property<short>("sensor_sio")
                        .HasColumnType("smallint");

                    b.Property<short>("strike_mode")
                        .HasColumnType("smallint");

                    b.Property<short>("strike_t_max")
                        .HasColumnType("smallint");

                    b.Property<short>("strike_t_min")
                        .HasColumnType("smallint");

                    b.Property<short>("strk_follow_delay")
                        .HasColumnType("smallint");

                    b.Property<short>("strk_follow_pulse")
                        .HasColumnType("smallint");

                    b.Property<short>("strk_number")
                        .HasColumnType("smallint");

                    b.Property<short>("strk_sio")
                        .HasColumnType("smallint");

                    b.Property<short>("strk_t2")
                        .HasColumnType("smallint");

                    b.HasKey("id");

                    b.ToTable("ar_acrs");
                });

            modelBuilder.Entity("HIDAeroService.Entity.ar_acr_mode", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("value")
                        .HasColumnType("smallint");

                    b.HasKey("id");

                    b.ToTable("ar_acr_modes");

                    b.HasData(
                        new
                        {
                            id = 1,
                            description = "Disable the ACR, no REX",
                            name = "Disable",
                            value = (short)1
                        },
                        new
                        {
                            id = 2,
                            description = "Unlock (unlimited access)",
                            name = "Unlock",
                            value = (short)2
                        },
                        new
                        {
                            id = 3,
                            description = "Locked (no access, REX active)",
                            name = "Locked",
                            value = (short)3
                        },
                        new
                        {
                            id = 4,
                            description = "Facility code only",
                            name = "Facility code only",
                            value = (short)4
                        },
                        new
                        {
                            id = 5,
                            description = "Card only",
                            name = "Card only",
                            value = (short)5
                        },
                        new
                        {
                            id = 6,
                            description = "PIN only",
                            name = "PIN only",
                            value = (short)6
                        },
                        new
                        {
                            id = 7,
                            description = "Card and PIN required",
                            name = "Card and PIN",
                            value = (short)7
                        },
                        new
                        {
                            id = 8,
                            description = "Card or PIN required",
                            name = "Card or PIN",
                            value = (short)8
                        });
                });

            modelBuilder.Entity("HIDAeroService.Entity.ar_apb_mode", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("value")
                        .HasColumnType("smallint");

                    b.HasKey("id");

                    b.ToTable("ar_apb_modes");

                    b.HasData(
                        new
                        {
                            id = 1,
                            description = "Do not check or alter anti-passback location. No antipassback rules.",
                            name = "None",
                            value = (short)0
                        },
                        new
                        {
                            id = 2,
                            description = "Soft anti-passback: Accept any new location, change the user’s location to current reader, and generate an antipassback violation for an invalid entry.",
                            name = "Soft anti-passback",
                            value = (short)1
                        },
                        new
                        {
                            id = 3,
                            description = "Hard anti-passback: Check user location, if a valid entry is made, change user’s location to new location. If an invalid entry is attempted, do not grant access.",
                            name = "Hard anti-passback",
                            value = (short)2
                        });
                });

            modelBuilder.Entity("HIDAeroService.Entity.ar_card_format", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<short>("bits")
                        .HasColumnType("smallint");

                    b.Property<short>("ch_ln")
                        .HasColumnType("smallint");

                    b.Property<short>("ch_loc")
                        .HasColumnType("smallint");

                    b.Property<short>("facility")
                        .HasColumnType("smallint");

                    b.Property<short>("fc_ln")
                        .HasColumnType("smallint");

                    b.Property<short>("fc_loc")
                        .HasColumnType("smallint");

                    b.Property<short>("flags")
                        .HasColumnType("smallint");

                    b.Property<short>("function_id")
                        .HasColumnType("smallint");

                    b.Property<short>("ic_ln")
                        .HasColumnType("smallint");

                    b.Property<short>("ic_loc")
                        .HasColumnType("smallint");

                    b.Property<short>("number")
                        .HasColumnType("smallint");

                    b.Property<short>("offset")
                        .HasColumnType("smallint");

                    b.Property<short>("pe_ln")
                        .HasColumnType("smallint");

                    b.Property<short>("pe_loc")
                        .HasColumnType("smallint");

                    b.Property<short>("po_ln")
                        .HasColumnType("smallint");

                    b.Property<short>("po_loc")
                        .HasColumnType("smallint");

                    b.HasKey("id");

                    b.ToTable("ar_card_formats");

                    b.HasData(
                        new
                        {
                            id = 1,
                            bits = (short)26,
                            ch_ln = (short)16,
                            ch_loc = (short)9,
                            facility = (short)-1,
                            fc_ln = (short)0,
                            fc_loc = (short)0,
                            flags = (short)0,
                            function_id = (short)1,
                            ic_ln = (short)0,
                            ic_loc = (short)0,
                            number = (short)0,
                            offset = (short)0,
                            pe_ln = (short)13,
                            pe_loc = (short)0,
                            po_ln = (short)13,
                            po_loc = (short)13
                        });
                });

            modelBuilder.Entity("HIDAeroService.Entity.ar_card_holder", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("card_holder_id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("card_holder_refenrence_number")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<string>("email")
                        .HasColumnType("text");

                    b.Property<string>("holder_status")
                        .HasColumnType("text");

                    b.Property<int>("issue_code_running_number")
                        .HasColumnType("integer");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("phone")
                        .HasColumnType("text");

                    b.Property<string>("sex")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("updated_date")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.ToTable("ar_card_holders");
                });

            modelBuilder.Entity("HIDAeroService.Entity.ar_control_point", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<short>("cp_number")
                        .HasColumnType("smallint");

                    b.Property<short>("mode")
                        .HasColumnType("smallint");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("op_number")
                        .HasColumnType("smallint");

                    b.Property<string>("scp_ip")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("sio_number")
                        .HasColumnType("smallint");

                    b.HasKey("id");

                    b.ToTable("ar_control_point");
                });

            modelBuilder.Entity("HIDAeroService.Entity.ar_credentials", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<short>("access_level")
                        .HasColumnType("smallint");

                    b.Property<int>("act_time")
                        .HasColumnType("integer");

                    b.Property<int>("bits")
                        .HasColumnType("integer");

                    b.Property<Guid>("card_holder_refenrence_number")
                        .HasColumnType("uuid");

                    b.Property<long>("card_number")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("deact_time")
                        .HasColumnType("integer");

                    b.Property<int>("facility_code")
                        .HasColumnType("integer");

                    b.Property<string>("image")
                        .HasColumnType("text");

                    b.Property<int>("issue_code")
                        .HasColumnType("integer");

                    b.Property<string>("pin")
                        .HasColumnType("text");

                    b.Property<DateTime>("updated_date")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.ToTable("ar_credentials");
                });

            modelBuilder.Entity("HIDAeroService.Entity.ar_ip_mode", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("value")
                        .HasColumnType("smallint");

                    b.HasKey("id");

                    b.ToTable("ar_ip_modes");

                    b.HasData(
                        new
                        {
                            id = 1,
                            description = "Normally closed, no End-Of-Line (EOL)",
                            name = "Normally closed",
                            value = (short)0
                        },
                        new
                        {
                            id = 2,
                            description = "Normally open, no EOL",
                            name = "Normally open",
                            value = (short)1
                        });
                });

            modelBuilder.Entity("HIDAeroService.Entity.ar_monitor_point", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<short>("delay_entry")
                        .HasColumnType("smallint");

                    b.Property<short>("delay_exit")
                        .HasColumnType("smallint");

                    b.Property<short>("icvt_num")
                        .HasColumnType("smallint");

                    b.Property<short>("ip_number")
                        .HasColumnType("smallint");

                    b.Property<short>("lf_code")
                        .HasColumnType("smallint");

                    b.Property<short>("mp_number")
                        .HasColumnType("smallint");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("scp_ip")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("sio_number")
                        .HasColumnType("smallint");

                    b.HasKey("id");

                    b.ToTable("ar_monitor_point");
                });

            modelBuilder.Entity("HIDAeroService.Entity.ar_n_acr", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<short>("acr_number")
                        .HasColumnType("smallint");

                    b.Property<bool>("is_available")
                        .HasColumnType("boolean");

                    b.Property<string>("scp_ip")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("sio_number")
                        .HasColumnType("smallint");

                    b.HasKey("id");

                    b.ToTable("ar_acr_no");
                });

            modelBuilder.Entity("HIDAeroService.Entity.ar_n_cp", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<short>("cp_number")
                        .HasColumnType("smallint");

                    b.Property<bool>("is_available")
                        .HasColumnType("boolean");

                    b.Property<string>("scp_ip")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("sio_number")
                        .HasColumnType("smallint");

                    b.HasKey("id");

                    b.ToTable("ar_cp_no");
                });

            modelBuilder.Entity("HIDAeroService.Entity.ar_n_mp", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<short>("ip_number")
                        .HasColumnType("smallint");

                    b.Property<bool>("is_available")
                        .HasColumnType("boolean");

                    b.Property<short>("mp_number")
                        .HasColumnType("smallint");

                    b.Property<string>("scp_ip")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("sio_number")
                        .HasColumnType("smallint");

                    b.HasKey("id");

                    b.ToTable("ar_mp_no");
                });

            modelBuilder.Entity("HIDAeroService.Entity.ar_n_sio", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<bool>("is_available")
                        .HasColumnType("boolean");

                    b.Property<short>("port")
                        .HasColumnType("smallint");

                    b.Property<string>("scp_ip")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("sio_number")
                        .HasColumnType("smallint");

                    b.HasKey("id");

                    b.ToTable("ar_sio_no");
                });

            modelBuilder.Entity("HIDAeroService.Entity.ar_n_tz", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<bool>("is_available")
                        .HasColumnType("boolean");

                    b.Property<short>("tz_number")
                        .HasColumnType("smallint");

                    b.HasKey("id");

                    b.ToTable("ar_tz_no");

                    b.HasData(
                        new
                        {
                            id = 1,
                            is_available = false,
                            tz_number = (short)1
                        });
                });

            modelBuilder.Entity("HIDAeroService.Entity.ar_nak", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime>("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("nak_desc")
                        .HasColumnType("text");

                    b.Property<int>("nak_desc_code")
                        .HasColumnType("integer");

                    b.Property<string>("nak_reason")
                        .HasColumnType("text");

                    b.Property<int>("tag_no")
                        .HasColumnType("integer");

                    b.Property<DateTime>("updated_date")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.ToTable("ar_naks");
                });

            modelBuilder.Entity("HIDAeroService.Entity.ar_op_mode", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("value")
                        .HasColumnType("smallint");

                    b.HasKey("id");

                    b.ToTable("ar_op_modes");

                    b.HasData(
                        new
                        {
                            id = 1,
                            description = "Normal Mode with Offline: No change",
                            value = (short)0
                        },
                        new
                        {
                            id = 2,
                            description = "Inverted Mode Offline: No change",
                            value = (short)1
                        },
                        new
                        {
                            id = 3,
                            description = "Normal Mode Offline: Inactive",
                            value = (short)16
                        },
                        new
                        {
                            id = 4,
                            description = "Inverted Mode Offline: Inactive",
                            value = (short)17
                        },
                        new
                        {
                            id = 5,
                            description = "Normal Mode Offline: Active",
                            value = (short)32
                        },
                        new
                        {
                            id = 6,
                            description = "Inverted Mode Offline: Inactive",
                            value = (short)33
                        });
                });

            modelBuilder.Entity("HIDAeroService.Entity.ar_operator", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime>("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("first_name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("last_name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("middle_name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("photo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("updated_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("user_id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("user_name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("ar_users");
                });

            modelBuilder.Entity("HIDAeroService.Entity.ar_rdr_cfg_mode", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("value")
                        .HasColumnType("smallint");

                    b.HasKey("id");

                    b.ToTable("ar_rdr_modes");

                    b.HasData(
                        new
                        {
                            id = 1,
                            description = "Single reader, controlling the door",
                            name = "Single Reader",
                            value = (short)0
                        },
                        new
                        {
                            id = 2,
                            description = "Paired readers, Master - this reader controls the door",
                            name = "Paired readers, Master",
                            value = (short)1
                        },
                        new
                        {
                            id = 3,
                            description = "Paired readers, Slave - this reader does not control door",
                            name = "Paired readers, Slave",
                            value = (short)2
                        },
                        new
                        {
                            id = 4,
                            description = "Turnstile Reader. Two modes selected by: n strike_t_min != strike_t_max (original implementation - an access grant pulses the strike output for 1 second) n strike_t_min == strike_t_max (pulses the strike output after a door open/close signal for each additional access grant if several grants are waiting)",
                            name = "Turnstile Reader",
                            value = (short)3
                        },
                        new
                        {
                            id = 5,
                            description = "Elevator, no floor select feedback",
                            name = "Elevator, no floor",
                            value = (short)4
                        },
                        new
                        {
                            id = 6,
                            description = "Elevator with floor select feedback",
                            name = "Elevator with floor",
                            value = (short)5
                        });
                });

            modelBuilder.Entity("HIDAeroService.Entity.ar_reader", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime>("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<short>("led_drive_mode")
                        .HasColumnType("smallint");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("osdp_flag")
                        .HasColumnType("smallint");

                    b.Property<short>("reader_number")
                        .HasColumnType("smallint");

                    b.Property<string>("scp_mac")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("sio_number")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("updated_date")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.ToTable("ar_readers");
                });

            modelBuilder.Entity("HIDAeroService.Entity.ar_scp", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("ip_address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("mac")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("n_acr")
                        .HasColumnType("smallint");

                    b.Property<short>("n_alvl")
                        .HasColumnType("smallint");

                    b.Property<short>("n_cp")
                        .HasColumnType("smallint");

                    b.Property<short>("n_hol")
                        .HasColumnType("smallint");

                    b.Property<short>("n_mp")
                        .HasColumnType("smallint");

                    b.Property<short>("n_mpg")
                        .HasColumnType("smallint");

                    b.Property<short>("n_proc")
                        .HasColumnType("smallint");

                    b.Property<short>("n_sio")
                        .HasColumnType("smallint");

                    b.Property<short>("n_trgr")
                        .HasColumnType("smallint");

                    b.Property<short>("n_tz")
                        .HasColumnType("smallint");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("scp_id")
                        .HasColumnType("smallint");

                    b.Property<string>("serial_number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("ar_scps");
                });

            modelBuilder.Entity("HIDAeroService.Entity.ar_sio", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<short>("address")
                        .HasColumnType("smallint");

                    b.Property<short>("baud_rate")
                        .HasColumnType("smallint");

                    b.Property<short>("model")
                        .HasColumnType("smallint");

                    b.Property<string>("model_desc")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("msp1_number")
                        .HasColumnType("smallint");

                    b.Property<short>("n_dialect")
                        .HasColumnType("smallint");

                    b.Property<short>("n_inputs")
                        .HasColumnType("smallint");

                    b.Property<short>("n_outputs")
                        .HasColumnType("smallint");

                    b.Property<short>("n_protocol")
                        .HasColumnType("smallint");

                    b.Property<short>("n_readers")
                        .HasColumnType("smallint");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("port_number")
                        .HasColumnType("smallint");

                    b.Property<string>("scp_ip")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("scp_name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("sio_number")
                        .HasColumnType("smallint");

                    b.HasKey("id");

                    b.ToTable("ar_sios");
                });

            modelBuilder.Entity("HIDAeroService.Entity.ar_strk_mode", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("value")
                        .HasColumnType("smallint");

                    b.HasKey("id");

                    b.ToTable("ar_strk_modes");

                    b.HasData(
                        new
                        {
                            id = 1,
                            description = "Do not use! This would allow the strike to stay active for the entire strike time allowing the door to be opened multiple times.",
                            name = "Normal",
                            value = (short)0
                        },
                        new
                        {
                            id = 2,
                            description = "Deactivate strike when door opens",
                            name = "Deactivate On Open",
                            value = (short)1
                        },
                        new
                        {
                            id = 3,
                            description = "Deactivate strike on door close or strike_t_max expires",
                            name = "Deactivate On Close",
                            value = (short)2
                        },
                        new
                        {
                            id = 4,
                            description = "Used with ACR_S_OPEN or ACR_S_CLOSE, to select tailgate mode: pulse (strk_sio:strk_number+1) relay for each user expected to enter",
                            name = "Tailgate",
                            value = (short)16
                        });
                });

            modelBuilder.Entity("HIDAeroService.Entity.ar_tz", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<short>("act_time")
                        .HasColumnType("smallint");

                    b.Property<short>("deact_time")
                        .HasColumnType("smallint");

                    b.Property<short>("intervals")
                        .HasColumnType("smallint");

                    b.Property<short>("mode")
                        .HasColumnType("smallint");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("tz_number")
                        .HasColumnType("smallint");

                    b.HasKey("id");

                    b.ToTable("ar_tzs");

                    b.HasData(
                        new
                        {
                            id = 1,
                            act_time = (short)0,
                            deact_time = (short)0,
                            intervals = (short)0,
                            mode = (short)1,
                            name = "Always",
                            tz_number = (short)1
                        });
                });

            modelBuilder.Entity("HIDAeroService.Entity.ar_tz_interval", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<short>("i_days")
                        .HasColumnType("smallint");

                    b.Property<string>("i_end")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("i_start")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("intervals_number")
                        .HasColumnType("smallint");

                    b.Property<short>("tz_number")
                        .HasColumnType("smallint");

                    b.HasKey("id");

                    b.ToTable("ar_tz_intervals");
                });

            modelBuilder.Entity("HIDAeroService.Entity.event_transction", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("additional")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("date")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("serial_number")
                        .HasColumnType("integer");

                    b.Property<string>("source")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("source_number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("time")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("transaction_code")
                        .HasColumnType("double precision");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("updated_date")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.ToTable("ar_events");
                });
#pragma warning restore 612, 618
        }
    }
}
